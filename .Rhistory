my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("bill","Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
colnames(cnames,my_data)
?colnames
colnames(my_data)<-cnames
my_data
swirl()
x<-c(1,2,3)
names(x)<("one","two","one")
names(x)<-c("one","two","one")
x["one"]
x
names(x)<-c("zero","two","one")
x["one"]
x["one"]
dim(x)<-c(3,4)
dim(x)<-c(3,1)
x
x=matrix(1:5,nrows=2,ncols=5)
x=matrix(1:5,nrow=2,ncol=5)
x
x=matrix(1:15,nrow=2,ncol=5)
x
row_names<-c("odd","even")
mat<-data.frame(row_names,x)
mat
colnames(mat)<-c("rows",1, 2, 3, 4, 5)
mat
x<-1:4
seq_along(x)
q()
rm(list=ls())
library(datasets)
data("iris")
iris
names(iris)
iris[Species]
iris["Species"]
iris$Species
iris[[4]]
iris[[5]]
x<-iris(which(iris$Species=="virginica"))
x<-iris[which(iris$Species=="virginica")]
?which
x<-iris[which(iris$Species=="virginica")]
x<-iris[,which(iris$Species=="virginica")]
iris[,which(iris$Species=="virginica")]
iris[,3]
iris[,5]
iris[,which(iris[,5]=="virginica")]
which(iris[,5]=="virginica")
iris[[,which(iris[,5]=="virginica")]]
iris[,which(iris[,5]=="virginica")]
iris[5,which(iris[,5]=="virginica")]
iris[[5,iris[,which(iris[,5]=="virginica")]]
y<-iris[[5,iris[,which(iris[,5]=="virginica")]]
y
x<-iris
x
which(x$Species=="virginica")
x[which(x$Species=="virginica"),5]
x[which(x$Species=="virginica"),1]
names(x)
mean(x[which(x$Species=="virginica"),1])
apply(iris[,1:4],2,mean)
mean(x[,1])
mean(x[,2])
mean(x[,3])
mean(x[,4])
library(datasets)
data(mtcars)
?mtcars
View(mtcars)
View(mtcars)
View(mtcars)
mean(mtcars$mpg)
mean(mtcars$mpg,mtcars$cyl)
?with
lapply(mtcars,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl,mean))
sapply(split(mtcars$mpg,mtcars$cyl),mean)
hp_by_cylinders<-sapply(split(mtcars$hp,mtcars$cyl),mean)
hp_by_cylinders
hp_by_cylinders[3]-hp_by_cylinders[1]
debug(ls)
ls
debug(ls)
ls()
2
4
rm(list=ls())
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL         #initialization (empty constructor)
set<-function(y)        # a constructor which gives (or replaces) matrix value,
# and erases the inverted value (if it exists)
{
x<<-y
inv<<-NULL
}
get<-function()         # returns the matrix
{                       #looks better with brackets, though unnecessary
x
}
setinverse<-function(solve)
{
inv<<-solve
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse) #the list returned to the main program
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getinverse()
if(!is.null(inv)) #if there's a cached version there's no meed to re-invert
{
message("Getting cached data")
return(inv)
}
## the next bit gets accessed if there wasn't a chched inverse
##(so the function hasn't returned anything, and is still going strong )
data<-x$get()
inv<-solve(data)
x$setinverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
?matrix
x<-matrix(data=1:10,nrow=2,ncol=5,byrow = TRUE)
x
x<-matrix(data=1:10,nrow=2,ncol=5,byrow = FALSE)
x
x<-matrix(data=1:10,nrow=2,ncol=5,byrow = TRUE)
x<-matrix(data=1:9,nrow=3,byrow = TRUE)
x
solve(x)
x<-matrix(data=2:10,nrow=3,byrow = TRUE)
solve(x)
x<-matrix(data=2:10,nrow=3,byrow = TRUE)
x[2,1]<-0
solve(x)
x
aMatrix<-makeCacheMatrix(x)
aMatrix$get()
aMatrix$getmean()
aMatrix$getinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL         #initialization (empty constructor)
set<-function(y)        # a constructor which gives (or replaces) matrix value,
# and erases the inverted value (if it exists)
{
x<<-y
inv<<-NULL
}
get<-function()         # returns the matrix
{                       #looks better with brackets, though unnecessary
x
}
setinverse<-function(solve)
{
inv<<-solve
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse) #the list returned to the main program
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getinverse()
if(!is.null(inv)) #if there's a cached version there's no meed to re-invert
{
message("Getting cached data")
return(inv)
}
## the next bit gets accessed if there wasn't a chched inverse
##(so the function hasn't returned anything, and is still going strong )
data<-x$get()
inv<-solve(data)
x$setinverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
aMatrix<-makeCacheMatrix(x)
aMatrix$get()
aMatrix$getinverse()
cacheSolve(aMatrix)
aMatrix$getinverse()
aMatrix$setinverse(1)
aMatrix$getinverse()
cacheSolve(aMatrix)
aMatrix<-makeCacheMatrix(x)
cacheSolve(aMatrix)
aMatrix$getinverse()
aMatrix<-makeCacheMatrix(x)
aMatrix$getinverse()
cacheSolve(aMatrix)
aMatrix$getinverse()
rm(list = ls())
library("swirl")
swirl()
0
rm
rm(list=ls())
library(swirl)
swirl()
z<-matrix(c(1:15))
z
dim(z)=3,5
dim(z)=c(3,5)
z
summary(z)
str(z)
str(rnorm)
sample('a':'z',5)
sample("a":"z",5)
sample(letters,5)
sample(1:10)
sample(1:10)
set.seed(1)
sample(1:10)
sample(1:10)
sample(1:10)
set.seed(1)
sample(1:10)
sample(1:10)
sample(1:10)
rbinom(73,size=100,prob=0.7)
rbinom(1,size=100,prob=0.7)
system.time(t<-1:1000)
t
system.time({t<-1:1000)
system.time(for (i in 1:1000)
for (j in 1000:1)
t[i,j]<-i+j)
dim(t)=c(1000,1000)
t<-matrix(dim=c(1000,1000))
t<-matrix(c(1000,1000))
t
dim(t)=c(1000,1000)
t<-c(1:100*100)
dim(t)=c(100,100)
dim(t)=(100,100)
?dim
dim(t)<-c(100,100)
t<-c(1:(100*100)
)
dim(t)=(100,100)
dim(t)<-(100,100)
dim(t)<-c(100,100)
system.time(for (i in 1:100)
for (j in 100:1)
t[i,j]<-i+j)
View(t)
View(t)
inv(t)
solve(t)
t[1,1]<-83
solve(t)
t[1,]<-83
t[,1]<-83
solve(t)
t2<-c(1:9)
class(t2)
dim(t2)<-c(3,3)
class(t2)
solve(t2)
t[3,3]<-8
solve(t2)
t[1,1]<-8
solve(t2)
t<=c(1,4,5,2,76,2,5,90,4)
t2<=c(1,4,5,2,76,2,5,90,4)
t2<-c(1,4,5,2,76,2,5,90,4)
solve(t2)
t2<-matrix(c(1,4,5,2,76,2,5,90,4))
str(t2)
dim(t2)<-c(3,3)
str(t2)
solve(t2)
system.time(solve(t2))
t2<-rnorm(10000)
str(t2)
t2<-matrix(rnorm(10000))
str(t2)
dim(t2)<-c(sqrt(length(t2)),sqrt(length(t2)))
t2
solve(t2)
system.time(solve(t2))
system.time(solve(solve(t2)))
rm(list = ls())
getwd()
getwd()
setwd("D:/Dropbox/github repositories/SW/SimilarWeb")
rm(list = ls())
gc()
#Import data
DQ_Data<-read.table(file = 'DQ_Data_b.tsv', sep = '\t', header = TRUE)
head(DQ_Data)
#Names refined
names(DQ_Data)[3]<-"Percent Unique"
names(DQ_Data)[4]<-"Number of Visits"
#subset
learning_set<-subset(DQ_Data,source==0)
set1<-subset(DQ_Data,source==1)
set2<-subset(DQ_Data,source==2)
set3<-subset(DQ_Data,source==3)
#make sure the sets don't have any data irrelevant to the learning set
set1<-subset(set1, set1$site %in% learning_set$site)
set2<-subset(set2, set2$site %in% learning_set$site)
set3<-subset(set3, set3$site %in% learning_set$site)
#subsetting learning set by each data set
learning1<-subset(learning_set, learning_set$site %in% set1$site)
learning1<-subset(learning_set, learning_set$site %in% set1$site)
learning2<-subset(learning_set, learning_set$site %in% set2$site)
learning3<-subset(learning_set, learning_set$site %in% set3$site)
rm(list = ls())
rm(list = ls())
gc()
#Import data
DQ_Data<-read.table(file = 'DQ_Data_b.tsv', sep = '\t', header = TRUE)
head(DQ_Data)
#Names refined
names(DQ_Data)[3]<-"Percent Unique"
names(DQ_Data)[4]<-"Number of Visits"
#subset
learning_set<-subset(DQ_Data,source==0)
set1<-subset(DQ_Data,source==1)
set2<-subset(DQ_Data,source==2)
set3<-subset(DQ_Data,source==3)
#make sure the sets don't have any data irrelevant to the learning set
set1<-subset(set1, set1$site %in% learning_set$site)
set2<-subset(set2, set2$site %in% learning_set$site)
set3<-subset(set3, set3$site %in% learning_set$site)
#subsetting learning set by each data set
learning1<-subset(learning_set, learning_set$site %in% set1$site)
learning1<-subset(learning_set, learning_set$site %in% set1$site)
learning2<-subset(learning_set, learning_set$site %in% set2$site)
learning3<-subset(learning_set, learning_set$site %in% set3$site)
?order
x<-c(1,3,2,0)
y<-c(1,2,3,4)
z<-cbind(x,y)
z
library(dplyr)
z<-arrange(z, x)
class(z)
z<-as.data.frame(z)
class(z)
z<-arrange(z, x)
z
arrange(learning1,`Number of Visits`)
View(learning1)
learning1<-arrange(learning1,`Number of Visits`)
set1<-arrange(set1, 'Number of Visits')
class(set1)
set1
names(set1)
set1<-arrange(set1, 'Number of Visits')
set1<-arrange(set1, set1$`Number of Visits`)
learning1<-arrange(learning1,`Number of Visits`)
lset11<-arrange(set1,`Number of Visits`)
set1<-arrange(set1,`Number of Visits`)
lm
lm(set1$`Number of Visits`, learning1$`Number of Visits`)
lm(set1$`Number of Visits` ~ learning1$`Number of Visits`)
library(ggplot2)
g<-ggplot2(lm(set1$`Number of Visits` ~ learning1$`Number of Visits`))
g<-ggplot(lm(set1$`Number of Visits` ~ learning1$`Number of Visits`))
g
g<-g+geom_point(size = 5, color = "black", alpha = 0.5)
g
g<-ggplot(lm(set1$`Number of Visits` ~ learning1$`Number of Visits`), aes(x=learning1$`Number of Visits`, y=set1$`Number of Visits`))
g<-g+geom_point(size = 5, color = "black", alpha = 0.5)
g
g<-g+xlab("Learning Set Visits")
g<-g+ylab("Set 1 Visits")
g
g<-g+geom_smooth(method = "lm", color = "blue")
g
coef(lm(set1$`Number of Visits` ~ learning1$`Number of Visits`))
g<-ggplot2(lm(set2$`Number of Visits` ~ learning1$`Number of Visits`))
g<-ggplot(lm(set2$`Number of Visits` ~ learning1$`Number of Visits`))
g<-ggplot(lm(set2$`Number of Visits` ~ learning2$`Number of Visits`))
g<-g+geom_point(size = 5, color = "black", alpha = 0.5)
g<-ggplot(lm(set2$`Number of Visits` ~ learning2$`Number of Visits`), aes(x=learning2$`Number of Visits`, y=set2$`Number of Visits`))
g<-g+geom_point(size = 5, color = "black", alpha = 0.5)
g<-g+xlab("Learning Set Visits")
g<-g+ylab("Set 2 Visits")
g
g<-g+geom_smooth(method = "lm", color = "blue")
g
f<-ggplot(lm(set2$`Number of Visits` ~ learning2$`Number of Visits`))
f<-f+geom_point(size = 5, color = "black", alpha = 0.5)
f
f<-ggplot(lm(set2$`Number of Visits` ~ learning2$`Number of Visits`), aes(x=learning2$`Number of Visits`, y=set2$`Number of Visits`))
f
f<-f+geom_point(size = 5, color = "black", alpha = 0.5)
f
e<-ggplot(lm(set3$`Number of Visits` ~ learning3$`Number of Visits`))
e<-e+geom_point(size = 5, color = "black", alpha = 0.5)
e<-ggplot(lm(set3$`Number of Visits` ~ learning3$`Number of Visits`), aes(x=learning3$`Number of Visits`, y=set3$`Number of Visits`))
e
e<-e+geom_point(size = 5, color = "black", alpha = 0.5)
d<-ggplot(lm(set3$`Number of Visits` ~ learning3$`Number of Visits`))
d<-ggplot(lm(set3$`Number of Visits` ~ learning3$`Number of Visits`), aes(x=learning3$`Number of Visits`, y=set3$`Number of Visits`))
d<-d+geom_point(size = 5, color = "black", alpha = 0.5)
d
d<-d+geom_smooth(method = "lm", color = "blue")
d
?rep
coef(lm(set3$`Number of Visits`~learning3$`Number of Visits`))
fit<-(lm(set3$`Number of Visits`~learning3$`Number of Visits`))
str(fit)
fit$coefficients
fit$residuals
plot(learning3$`Number of Visits`, fit$residuals)
t<-fit$residuals[fit$residuals<2e9]
s<-subset(learning3, fit$residuals<2e9)
length(s)
length(s[,1])
length(t[,1])
length(t)
length(learning3[,1])
plot(s,t)
plot(s$`Number of Visits`,t)
coef(lm(t~s))
coef(lm(t~s$`Number of Visits`))
?predict
p1<-data.frame(predict(lm(set1~learning1), newdata<-mean(learning1$`Number of Visits`, interval = ("confidence"))))
p1<-data.frame(predict(lm(set1~learning1$`Number of Visits`), newdata<-mean(learning1$`Number of Visits`, interval = ("confidence"))))
p1<-data.frame(predict(lm(set1$`Number of Visits`~learning1$`Number of Visits`), newdata<-mean(learning1$`Number of Visits`, interval = ("confidence"))))
p1<-data.frame(predict(lm(set1$`Number of Visits`~learning1$`Number of Visits`), newdata<-mean(learning1$`Number of Visits`), interval = ("confidence")))
p1<-predict(lm(set1$`Number of Visits`~learning1$`Number of Visits`))
set1$`Number of Visits`[1]
head(p1)
summary(lm(set1$`Number of Visits`~learning1$`Number of Visits`))
summary(lm(set1$`Number of Visits`~learning1$`Number of Visits`))$coefficients
manipulate()
library(manipulate)
install.packages("manipulate")
?mtcars
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = .~drv, binwidth = 2)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
library(swirl)
swirl()
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g<-ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 0.5, aes(color = drv))
g+geom_point(size = 4, alpha = 0.5, color = drv)
g+geom_point(size = 4, alpha = 0.5, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") +
| labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color = drv, size = 2, alpha = 1/2))+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+geom_point(aes(color = drv) size = 2, alpha = 1/2)+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+geom_point(aes(color = drv) ,size = 2, alpha = 1/2)+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+geom_point(aes(color = drv))+theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
ggplot(testdat, aes(x=myx, y=myy))
ggplot(testdat, aes(x=myx, y=myy))
g<-ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g<-ggplot(mpg, aes(x=displ, y=hwy, color = factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")+labs(x="Displacement", y = "Highway Mileage", title = "Swirl Rules!")
